PAGE NAVIGATION

TWO EVENTS OCCUR WHEN THE FOLLOWING STATEMENT IS ENCOUNTERED IN CODE:
	IWEBDRIVER DRIVER = NEW CHROMEDRIVER();
	
	IT CREATES AN INSTANCE OF "CHROMEDRIVER" AND LAUNCHES THE CHROME BROWSER
	
	ONCE THIS HAPPENS, THE WEBSITE TO BE NAVIGATED TO IS THEN OPENED
	
	TO DO THIS, WE WILL USE THE "INAVIGATION" INTERFACE, WHICH CONTAINS A "GOTOURL" METHOD

 IN THE APP.CONFIG FILE, ADD A NEW KEY:VALUE PAIR AS "WEBSITE:HTTP://ASDA.CO.UK", THEN ADD THE SAME CONFIG KEY TO THE APPCONFIGKEYS CLASS AS "PUBLIC CONST STRING WEBSITE = "WEBSITE"
 
 ADD A METHOD TO THE ICONFIG INTERFACE WHICH WILL HELP US GET THE URL: "STRING GETWEBSITE();". MAKE SURE THAT THE NEW METHOD IS IMPLEMENTED IN THE APPCONFIGREADER CLASS, SINCE IT'S INHERITING FROM THE ICONFIG INTERFACE. EDIT THE PLACEHOLDER TEXT IN THE DEFINED METHOD AND CHANGE IT TO MATCH THE EXISTING ONES: THIS WILL THEN BE "RETURN CONFIGURATIONMANAGER.APPSETTINGS.GET(APPCONFIGKEYS.WEBSITE);
 
 IN THE TESTSCRIPT FOLDER, CREATE A SUB-FOLDER AND CALL IT PAGENAVIGATION. INSIDE IT, CREATE A CLASS CALLED TESTNAVIGATIONPAGE(); AND DECORATE IT WITH THE [TESTCLASS] ATTRIBUTE. INSIDE IT, CREATE A METHOD CALLED OPENPAGE() AND DECORATE IT WITH THE [TESTMETHOD] ATTRIBUTE
 
 WE NEED TO GET THE INSTANCE OF DRIVER AVAILABLE FROM OUR BASECLASS SO WE CAN CALL IT BY USING OBJECTREPOSITORY.DRIVER.NAVIGATE; IF WE DRILL DOWN INTO THE DRIVER METHOD, WE WILL SEE THAT INAVIGATION INTERFACE IS LINKED TO THE IWEBDRIVER CLASS SO WE CAN THEN AMEND THE CODE ABOVE TO BECOME:
	INAVIGATION PAGE = OBJECTREPOSITORY.DRIVER.NAVIGATE();
	PAGE.GOTOURL(OBJECTREPOSITORY.CONFIG.GETWEBSITE());
	
	TO MAKE OUR CODE EVEN MORE COOLER, WE CAN THEN MERGE THE ABOVE TWO STATEMENTS INTO ONE, SUCH LIKE:
	OBJECTREPOSITORY.DRIVER.NAVIGATE().GOTOURL(OBJECTREPOSITORY.CONFIG.GETWEBSITE());
 
 ONCE THIS IS DONE, WE CAN THEN ADD A HELPER CLASS TO THE COMPONENTHELPER FOLDER, WHICH WILL TAKE CARE OF ALL RELATED NAVIGATIONAL PROCESSES.
	PUBLIC CLASS NAVIGATIONHELPER(){
		PUBLIC STATIC VOID NAVIGATETOURL(STRING URL) {
			//GO AND GRAB THE MERGED CODE FROM THE OPENPAGE METHOD AND WE CAN MODIFY IT HERE
			OBJECTREPOSITORY.DRIVER.NAVIGATE().GOTOURL(URL);
		}
	}
 
 BACK IN THE OPENPAGE METHOD, WE CAN THEN CALL THE HELPER METHOD AS:
	NAVIGATIONHELPER.NAVIGATETOURL(OBJECTREPOSITORY.CONFIG.GETWEBSITE());
	
OUR CODE SHOULD RUN FINE BUT WE STILL NEED TO ADDRESS THE ISSUE OF THE OPEN BROWSER SESSIONS. THIS CAN CAUSE MEMORY LEAKAGE IF NOT ADDRESSED ON TIME AND CAUSE THE APPLICATION NOT TO FUNCTION PROPERLY. SO WE NEED TO IMPLEMENT THE CLOSE() &/OR QUIT() METHOD, WHICH WE WILL USE TO ADDRESS THIS POTENTIAL ISSUE.

CLOSE(); - THIS IS USED TO CLOSE THE CURRENT BROWSER WINDOW AND IT WILL NOT STOP THE WEBDRIVER

QUIT(); - THIS WILL CLOSE ALL THE BROWSER WINDOWS AND ALSO STOP THE WEBDRIVER	

AGAIN, IF WE CHECK THE IWEBDRIVER INTERFACE, WE WILL SEE THAT THE CLOSE & QUIT METHODS ARE ALREADY DEFINED FOR US. LET'S GO AN USE THEM.

IN OUR BASECLASS, CREATE A STATIC METHOD AND DECORATE IT WITH THE ASSEMBLYCLEANUP ATTRIBUTE, BECAUSE WE WANT IT TO BE THE LAST ACTION IN THE CODE:
	[ASSEMBLYCLEANUP]
	PUBLIC STATIC VOID TEARDOWN() {
		//WE NEED TO PUT IN A CHECK TO SEE IF THE DRIVER IS STILL ACTIVE BY USING AN IF STATEMENT
		IF (OBJECTREPOSITORY.DRIVER != NULL) {
			OBJECTREPOSITORY.DRIVER.CLOSE();
			OBJECTREPOSITORY.DRIVER.QUIT();
		}
	}
	
FOR THE DRIVER.CLOSE AND DRIVER.QUIT ABOCE, IT APPEARS THAT A BETTER ALTERNATIVE COULD BE DRIVER.DISPOSE. THIS HELPED ADDRESS A RECURRING PROBLEM WITH THE DRIVER INSTANCES NOT CLOSING DOWN PROPERLY AND OUR HAVING TO MANUALLY KILL THE PROCESS EACH TIME WE RAN A TEST.	